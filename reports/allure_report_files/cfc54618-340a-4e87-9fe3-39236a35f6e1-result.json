{"name": "test_admin_login[wxl-123456-222-JPress\\u540e\\u53f0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: 验证码不正确，请重新输入\nMessage: unexpected alert open: {Alert text : 验证码不正确，请重新输入}\n  (Session info: chrome=116.0.5845.97)\nStacktrace:\n\tGetHandleVerifier [0x003537C3+48947]\n\t(No symbol) [0x002E8551]\n\t(No symbol) [0x001EC92D]\n\t(No symbol) [0x00247AAD]\n\t(No symbol) [0x00234E86]\n\t(No symbol) [0x002116C7]\n\t(No symbol) [0x0021284D]\n\tGetHandleVerifier [0x0059FDF9+2458985]\n\tGetHandleVerifier [0x005E744F+2751423]\n\tGetHandleVerifier [0x005E1361+2726609]\n\tGetHandleVerifier [0x003D0680+560624]\n\t(No symbol) [0x002F238C]\n\t(No symbol) [0x002EE268]\n\t(No symbol) [0x002EE392]\n\t(No symbol) [0x002E10B7]\n\tBaseThreadInitThunk [0x76437D59+25]\n\tRtlInitializeExceptionChain [0x7762B79B+107]\n\tRtlClearBits [0x7762B71F+191]", "trace": "self = <testcases.pom.tests.test_AdminLogin.TestAdminLogin object at 0x00000110FF33B350>\nusername = 'wxl', pwd = '123456', captcha = '6c3', excepted = 'JPress后台'\n\n    @pytest.mark.dependency(name='admin_login')\n    @pytest.mark.parametrize('username, pwd, captcha, excepted', admin_login_data)\n    def test_admin_login(self, username, pwd, captcha, excepted):\n        # 输入用户名和密码\n        self.adminLoginPage.input_username(username)\n        self.adminLoginPage.input_pwd(pwd)\n        # 判断是否自动识别验证码\n        if captcha != '111':\n            captcha = util.get_code(self.driver, 'captcha-img')\n    \n        self.adminLoginPage.input_captcha(captcha)\n    \n        self.adminLoginPage.click_login_btn()\n    \n        # 使用断言验证\n        if captcha != '111':\n>           WebDriverWait(self.driver, 5).until(EC.title_is(excepted))\n\ntestcases\\pom\\tests\\test_AdminLogin.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:86: in until\n    value = method(self._driver)\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:41: in _predicate\n    return driver.title == title\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:460: in title\n    return self.execute(Command.GET_TITLE).get(\"value\", \"\")\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000110FF74B410>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"验证码不正确，请重新输入\"},\"error\":\"unexpected alert open\",\"message\":\"unexpect...dInitThunk [0x76437D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7762B79B+107]\\\\n\\\\tRtlClearBits [0x7762B71F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: 验证码不正确，请重新输入\nE           Message: unexpected alert open: {Alert text : 验证码不正确，请重新输入}\nE             (Session info: chrome=116.0.5845.97)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x003537C3+48947]\nE           \t(No symbol) [0x002E8551]\nE           \t(No symbol) [0x001EC92D]\nE           \t(No symbol) [0x00247AAD]\nE           \t(No symbol) [0x00234E86]\nE           \t(No symbol) [0x002116C7]\nE           \t(No symbol) [0x0021284D]\nE           \tGetHandleVerifier [0x0059FDF9+2458985]\nE           \tGetHandleVerifier [0x005E744F+2751423]\nE           \tGetHandleVerifier [0x005E1361+2726609]\nE           \tGetHandleVerifier [0x003D0680+560624]\nE           \t(No symbol) [0x002F238C]\nE           \t(No symbol) [0x002EE268]\nE           \t(No symbol) [0x002EE392]\nE           \t(No symbol) [0x002E10B7]\nE           \tBaseThreadInitThunk [0x76437D59+25]\nE           \tRtlInitializeExceptionChain [0x7762B79B+107]\nE           \tRtlClearBits [0x7762B71F+191]\n\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:244: UnexpectedAlertPresentException"}, "attachments": [{"name": "log", "source": "53637bce-110d-4acd-b571-33d18cc0f57a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "username", "value": "'wxl'"}, {"name": "pwd", "value": "'123456'"}, {"name": "captcha", "value": "'222'"}, {"name": "excepted", "value": "'JPress后台'"}], "start": 1692684921155, "stop": 1692684921959, "uuid": "bd09269c-7ceb-4127-8ec5-91908ac15334", "historyId": "957c328772ba1b9604e37219f0388741", "testCaseId": "b3bc13bed7f830aaf4fe7cc97b0472b1", "fullName": "testcases.pom.tests.test_Category.TestAdminLogin#test_admin_login", "labels": [{"name": "tag", "value": "dependency(name='admin_login')"}, {"name": "parentSuite", "value": "testcases.pom.tests"}, {"name": "suite", "value": "test_Category"}, {"name": "subSuite", "value": "TestAdminLogin"}, {"name": "host", "value": "DESKTOP-ME9GP0E"}, {"name": "thread", "value": "21784-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.pom.tests.test_Category"}]}